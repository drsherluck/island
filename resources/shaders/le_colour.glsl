
// Given in 10 nm bands from 380nm to 760nm
// X,Y,Z
const vec3 cie_1931_std_observer[38]={
	vec3(0.001368000000,0.0000390000000,0.006450001000),
	vec3(0.004243000000,0.0001200000000,0.020050010000),
	vec3(0.014310000000,0.0003960000000,0.067850010000),
	vec3(0.043510000000,0.0012100000000,0.207400000000),
	vec3(0.134380000000,0.0040000000000,0.645600000000),
	vec3(0.283900000000,0.0116000000000,1.385600000000),
	vec3(0.348280000000,0.0230000000000,1.747060000000),
	vec3(0.336200000000,0.0380000000000,1.772110000000),
	vec3(0.290800000000,0.0600000000000,1.669200000000),
	vec3(0.195360000000,0.0909800000000,1.287640000000),
	vec3(0.095640000000,0.1390200000000,0.812950100000),
	vec3(0.032010000000,0.2080200000000,0.465180000000),
	vec3(0.004900000000,0.3230000000000,0.272000000000),
	vec3(0.009300000000,0.5030000000000,0.158200000000),
	vec3(0.063270000000,0.7100000000000,0.078249990000),
	vec3(0.165500000000,0.8620000000000,0.042160000000),
	vec3(0.290400000000,0.9540000000000,0.020300000000),
	vec3(0.433449900000,0.9949501000000,0.008749999000),
	vec3(0.594500000000,0.9950000000000,0.003900000000),
	vec3(0.762100000000,0.9520000000000,0.002100000000),
	vec3(0.916300000000,0.8700000000000,0.001650001000),
	vec3(1.026300000000,0.7570000000000,0.001100000000),
	vec3(1.062200000000,0.6310000000000,0.000800000000),
	vec3(1.002600000000,0.5030000000000,0.000340000000),
	vec3(0.854449900000,0.3810000000000,0.000190000000),
	vec3(0.642400000000,0.2650000000000,0.000049999990),
	vec3(0.447900000000,0.1750000000000,0.000020000000),
	vec3(0.283500000000,0.1070000000000,0.000000000000),
	vec3(0.164900000000,0.0610000000000,0.000000000000),
	vec3(0.087400000000,0.0320000000000,0.000000000000),
	vec3(0.046770000000,0.0170000000000,0.000000000000),
	vec3(0.022700000000,0.0082100000000,0.000000000000),
	vec3(0.011359160000,0.0041020000000,0.000000000000),
	vec3(0.005790346000,0.0020910000000,0.000000000000),
	vec3(0.002899327000,0.0010470000000,0.000000000000),
	vec3(0.001439971000,0.0005200000000,0.000000000000),
	vec3(0.000690078600,0.0002492000000,0.000000000000),
	vec3(0.000332301100,0.0001200000000,0.000000000000)
};

// Given in 10nm bands from 380nm to 760nm 
const float cie_std_illum_d65[38] = 
	{ 49.975, 54.6482, 82.7549, 91.486, 93.4318, 86.6823, 
      104.865, 117.008, 117.812, 114.861, 115.923, 108.811, 
      109.354, 107.802, 104.79, 107.689, 104.405, 104.046, 
      100, 96.3342, 95.788, 88.6856, 90.0062, 89.5991, 
      87.6987, 83.2886, 83.6992, 80.0268, 80.2146, 82.2778, 
      78.2842, 69.7213, 71.6091, 74.349, 61.604, 69.8856, 
      75.087, 63.5927 };

// convert CIE XYZ to linear rgb 
vec3 xyz_to_linear_rgb(in vec3 c){
	return  mat3(  
			 3.2404542, -0.9692660,  0.0556434,  // column 1
			-1.5371385,  1.8760108, -0.2040259,  // column 2
			-0.4985314,  0.0415560,  1.0572252   // column 3
			) 
		* c;
}

// Converts a color from linear light gamma to sRGB gamma
vec3 linear_rgb_to_srgb(vec3 linearRGB)
{
    bvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));
    vec3 higher = vec3(1.055)*pow(linearRGB, vec3(1.0/2.4)) - vec3(0.055);
    vec3 lower = linearRGB * vec3(12.92);

    return mix(higher, lower, cutoff);
}

// Converts a color from sRGB gamma to linear light gamma
vec3 srgb_to_linear_rgb(vec3 sRGB)
{
    bvec3 cutoff = lessThan(sRGB, vec3(0.04045));
    vec3 higher = pow((sRGB + vec3(0.055))/vec3(1.055), vec3(2.4));
    vec3 lower = sRGB/vec3(12.92);

    return mix(higher, lower, cutoff);
}

// Returns vec4 float color from 8 digit hex color
// parameter hexVal given as: 0xRRGGBBAA
vec4 rgba_linear_color_from_hex(in uint hexVal ){

	vec4 result = vec4(0);

	result.a = (hexVal >>  0) & 0xff;
	result.b = (hexVal >>  8) & 0xff;
	result.g = (hexVal >> 16) & 0xff;
	result.r = (hexVal >> 24) & 0xff;

	return (result/255.f);
}
